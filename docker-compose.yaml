services:
  backend:
    image: docker-spring-boot-postgres:latest
    restart: always
    build: .
    container_name: backend
    depends_on:
      db:
        condition: service_healthy

    environment:
      - spring.datasource.url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - spring.datasource.username=${POSTGRES_USER}
      - spring.datasource.password=${POSTGRES_PASSWORD}
      - spring.datasource.driver-class-name=org.postgresql.Driver
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}

    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - springapipostgres-net

  db:
    image: postgres:17.4-alpine
    restart: always
    container_name: db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sqlscripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_interval: 5s
    ports:
      - "5432:5432"
    networks:
      - springapipostgres-net

  pg_admin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    ports:
      - "15432:80"
    environment:
      - GUNICORN_THREADS=1
      - PGADMIN_DEFAULT_EMAIL=paulopsms@email.com
      - PGADMIN_DEFAULT_PASSWORD=mypgadmin
    depends_on:
      db:
        condition: service_healthy

    networks:
      - springapipostgres-net

volumes:
  pgdata:

networks:
  springapipostgres-net:
    driver: bridge